
#Область ОбработчикиСобытийРеквизитовФормы

&НаКлиенте
Процедура ОбъектМетаданныхНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьРезультатЗакрытия", ЭтотОбъект, Неопределено);
	ОткрытьФорму("ВнешняяОбработка.ПоискИЗаменаНеуникальныхЗначений.Форма.ФормаВыбораМетаданных", ПараметрыФормы, ЭтаФорма,,,, Оповещение);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НайтиНеуникальныеЗначения(Команда)
	    
	Если Не ЗначениеЗаполнено(ОбъектМетаданных) Тогда
				
		СообщитьПользователю("Поле не заполнено! Требуется выбрать объект метаданных.", "ОбъектМетаданных");
		Возврат;
		
	КонецЕсли;	
	
	Если Не ЗаполнитьТаблицу() Тогда
		
		СообщитьПользователю("Не найдено ни одного дубля!","Коллизии");
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьЗначения(Команда)
	
	Если Коллизии.Количество() = 0 Тогда
		СообщитьПользователю("Табличная часть пуста! Требуется найти коллизии.", "Коллизии");
		Возврат;
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаменитьЗначенияЗавершение", ЭтаФорма), 
				   "Далее будет выполнено присвоение нового кода найденным элементам. Строки у которых
				   |      		проставлен флаг ""НеИзменять"" обработаны не будут. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
					
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьАвтоматически(Команда)
	
	Если Коллизии.Количество() = 0 Тогда
		СообщитьПользователю("Табличная часть пуста! Требуется найти коллизии.", "Коллизии");
		Возврат;
	КонецЕсли;	
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОтметитьАвтоматическиЗавершение", ЭтаФорма), 
				   "Далее будет выполнен поиск ссылок на перечень элементов табличной части. В первую очередь будут обработаны 
				   |предопределенные значения. Если же предопределенные элементы отсутствуют, тогда приоритет будет отдан 
				   |элементам с наибольшим количеством ссылок. При завершении проставятся флаги у тех строк, дальнейшая обработка
				   |которых не требуется. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы


#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ЗаполнитьТаблицу()

	Коллизии.Очистить();
	
	Если ЕстьРеквизитКод() Тогда
		
		тзНеуникальныеЗначения = ПолучитьКоллизии();
							
		Если тзНеуникальныеЗначения <> Неопределено Тогда
			Коллизии.Загрузить(тзНеуникальныеЗначения);
					
			Возврат Истина;
		КонецЕсли;		
		
	КонецЕсли;	
			 	
	Возврат Ложь;
		        	
КонецФункции 

&НаСервере
Функция ПолучитьКоллизии()
	
	тзНеуникальныеЗначения = Неопределено;
			
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таблица.Код КАК Код,
	               |	Таблица.Ссылка КАК Ссылка,
				   |	Таблица.Наименование КАК Наименование,
				   |	Таблица.Предопределенный КАК Предопределенный,
	               |	Таблица.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	               |ПОМЕСТИТЬ втОсновная
	               |ИЗ
	               |	%Таблица% КАК Таблица
	               |ГДЕ
	               |	Таблица.ПометкаУдаления = ЛОЖЬ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втОсновная.Код КАК Код
	               |ПОМЕСТИТЬ втДублиКодов
	               |ИЗ
	               |	втОсновная КАК втОсновная
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втОсновная.Код
	               |
	               |ИМЕЮЩИЕ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втОсновная.Ссылка) > 1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втОсновная.Код КАК Код,
	               |	втОсновная.Ссылка КАК Ссылка,
				   |	втОсновная.Наименование КАК Наименование,
				   |	втОсновная.Предопределенный КАК Предопределенный,
	               |	втОсновная.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных
	               |ИЗ
	               |	втОсновная КАК втОсновная
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДублиКодов КАК втДублиКодов
	               |		ПО втОсновная.Код = втДублиКодов.Код
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Код";
			 		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Таблица%", КлассОбъекта + "." + ОбъектМетаданных);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		тзНеуникальныеЗначения = РезультатЗапроса.Выгрузить();
			
	КонецЕсли;	
				
	Возврат тзНеуникальныеЗначения;
	
КонецФункции

&НаСервере
Функция ОбработатьКоллизии()

	Попытка
		
		НачатьТранзакцию();
	    УстранитьКоллизии();
		ЗафиксироватьТранзакцию();
		
		РезультатФункции = Истина;
		
	Исключение
		
		ОтменитьТранзакцию();
				
		СообщитьПользователю("Не удалось устранить коллизии.");
		СообщитьПользователю(ОписаниеОшибки());
		
		РезультатФункции = Ложь;
		
	КонецПопытки;
	
	Возврат РезультатФункции;
	
КонецФункции 	

&НаСервере
Процедура УстранитьКоллизии()
	
	Для Каждого ЭлементКоллекции Из Коллизии Цикл
		
		Если ЭлементКоллекции.НеИзменять Тогда
		    Продолжить;
		КонецЕсли;
		
		ОбъектЗамены = ЭлементКоллекции.Ссылка.ПолучитьОбъект();
		ОбъектЗамены.УстановитьНовыйКод();
		ОбъектЗамены.Записать();
			
	КонецЦикла;	

	Коллизии.Очистить();
	
КонецПроцедуры
	
// Выводит сообщение пользователю
//
// Параметры:
//  Текст  - Строка - Текст сообщения.                
//  Поле  - Строка - Содержит путь к реквизиту формы, для которого было выведено сообщение,
//                  или к данным объекта.
//
&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьПользователю(Текст, Поле = "") 
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.Поле = Поле;
	Сообщение.Сообщить();
	
КонецПроцедуры	

&НаСервере
Функция ЕстьРеквизитКод()
	
	СоответствиеМетаданных = Новый Соответствие;
	СоответствиеМетаданных.Вставить("Справочник", "Справочники");
	СоответствиеМетаданных.Вставить("ПланВидовХарактеристик", "ПланыВидовХарактеристик");
	
	ЕстьРеквизит = Неопределено;
	Выполнить("ЕстьРеквизит = Метаданные." + СоответствиеМетаданных[КлассОбъекта] + "." + ОбъектМетаданных + ".ДлинаКода <> 0");
	
	Возврат ЕстьРеквизит;
	
КонецФункции 

&НаСервере
Процедура НайтиСсылкиНаОбъектыИПометить()
			
	тзКоллизии = РеквизитФормыВЗначение("Коллизии");
		
	СписокСсылок = НайтиПоСсылкам(тзКоллизии.ВыгрузитьКолонку("Ссылка"));
	СписокСсылок.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	СписокСсылок.ЗаполнитьЗначения(1, "Количество");
	СписокСсылок.Свернуть("Ссылка", "Количество");
	
	Для Каждого СтрТЗ Из СписокСсылок Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Ссылка", СтрТЗ.Ссылка);
		
		МассивНайденныхЭлементов = тзКоллизии.НайтиСтроки(ПараметрыОтбора);
		
		Если МассивНайденныхЭлементов.Количество() <> 0 Тогда
			МассивНайденныхЭлементов[0].КоличествоСсылок = СтрТЗ.Количество;				
		КонецЕсли;	
		
	КонецЦикла;	
		
	Элементы.КоллизииКоличествоСсылок.Видимость = Истина;
	
	тзСписокКодов = тзКоллизии.Скопировать(, "Код");
	тзСписокКодов.Свернуть("Код");

	тзКоллизии.Сортировать("Код Возр, КоличествоСсылок Убыв");
	
	Для Каждого СтрТЗ Из тзСписокКодов Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Код", СтрТЗ.Код);
		ПараметрыОтбора.Вставить("Предопределенный", Истина);
		
		МассивНайденныхПредопределенныхЭлементов = тзКоллизии.НайтиСтроки(ПараметрыОтбора);
		
		Если МассивНайденныхПредопределенныхЭлементов.Количество() <> 0 Тогда
		    МассивНайденныхПредопределенныхЭлементов[0].НеИзменять = Истина;
		Иначе	
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Код", СтрТЗ.Код);
		    			
			МассивНайденныхЭлементов = тзКоллизии.НайтиСтроки(ПараметрыОтбора);
			
			Если МассивНайденныхЭлементов.Количество() <> 0 Тогда
				МассивНайденныхЭлементов[0].НеИзменять = Истина;
			КонецЕсли;	
		КонецЕсли;
		 		
	КонецЦикла;	
		
	ЗначениеВРеквизитФормы(тзКоллизии, "Коллизии");
	
КонецПроцедуры 

#КонецОбласти // СлужебныеПроцедурыИФункции


#Область ОбработчикиСобытийПолейТЧКоллизии

&НаКлиенте
Процедура КоллизииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанныеСсылка = Элемент.ТекущиеДанные.Ссылка;
	ПоказатьЗначение(, ТекДанныеСсылка);
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийПолейТЧКоллизии


#Область ОбработчикиСобытийОповещений

&НаКлиенте	
Процедура ОбработатьРезультатЗакрытия(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
	
		ОбъектМетаданных = РезультатЗакрытия.ОбъектМетаданных;
		КлассОбъекта = РезультатЗакрытия.КлассМетаданных;
	
	КонецЕсли;
	
КонецПроцедуры	

&НаКлиенте
Процедура ОтметитьАвтоматическиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		НайтиСсылкиНаОбъектыИПометить()
	Иначе	
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьЗначенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("НеИзменять", Ложь);
		    			
		МассивПомеченныхЭлементов = Коллизии.НайтиСтроки(ПараметрыОтбора);
		
		Если МассивПомеченныхЭлементов.Количество() = 0 Тогда
			СообщитьПользователю("Не найдены элементы, которые возможно обработать.", "Коллизии");
			Возврат;
		КонецЕсли;
		
		Если ОбработатьКоллизии() Тогда
			ПоказатьПредупреждение(, "Все коллизиции устранены.");
		КонецЕсли;
		
	Иначе	
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийОповещений









	
	
